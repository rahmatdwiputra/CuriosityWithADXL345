
# 1 "../projectswithmick/CuriositywithADXL345Port/ADXL345.c"

# 183 "../projectswithmick/CuriositywithADXL345Port/ADXL345.h"
unsigned char ADXL345_GetRegisterValue(unsigned char registerAddress);


void ADXL345_SetRegisterValue(unsigned char registerAddress,
unsigned char registerValue);


char ADXL345_Init(char commProtocol);


void ADXL345_SetPowerMode(unsigned char pwrMode);


void ADXL345_GetXyz(short* x,
short* y,
short* z);


void ADXL345_GetGxyz(float* x,
float* y,
float* z);


void ADXL345_SetTapDetection(unsigned char tapType,
unsigned char tapAxes,
unsigned char tapDur,
unsigned char tapLatent,
unsigned char tapWindow,
unsigned char tapThresh,
unsigned char tapInt);


void ADXL345_SetActivityDetection(unsigned char actOnOff,
unsigned char actAxes,
unsigned char actAcDc,
unsigned char actThresh,
unsigned char actInt);


void ADXL345_SetInactivityDetection(unsigned char inactOnOff,
unsigned char inactAxes,
unsigned char inactAcDc,
unsigned char inactThresh,
unsigned char inactTime,
unsigned char inactInt);


void ADXL345_SetFreeFallDetection(unsigned char ffOnOff,
unsigned char ffThresh,
unsigned char ffTime,
unsigned char ffInt);


void ADXL345_SetOffset(unsigned char xOffset,
unsigned char yOffset,
unsigned char zOffset);


void ADXL345_SetRangeResolution(unsigned char gRange, unsigned char fullRes);

# 52 "../projectswithmick/CuriositywithADXL345Port/Communication.h"
unsigned char I2C_Init(unsigned long clockFreq);


unsigned char I2C_Write(unsigned char slaveAddress,
unsigned char* dataBuffer,
unsigned char bytesNumber,
unsigned char stopBit);


unsigned char I2C_Read(unsigned char slaveAddress,
unsigned char* dataBuffer,
unsigned char bytesNumber,
unsigned char stopBit);


unsigned char SPI_Init(unsigned char lsbFirst,
unsigned long clockFreq,
unsigned char clockPol,
unsigned char clockEdg);


unsigned char SPI_Init(unsigned char lsbFirst,
unsigned long clockFreq,
unsigned char clockPol,
unsigned char clockEdg);


unsigned char SPI_Read(unsigned char slaveDeviceId,
unsigned char* data,
unsigned char bytesNumber);


unsigned char SPI_Write(unsigned char slaveDeviceId,
unsigned char* data,
unsigned char bytesNumber);

# 52 "../projectswithmick/CuriositywithADXL345Port/ADXL345.c"
char communicationType = 0;
char selectedRange = 0;
char fullResolutionSet = 0;

# 67
unsigned char ADXL345_GetRegisterValue(unsigned char registerAddress)
{
unsigned char dataBuffer[2] = {0, 0};
unsigned char registerValue = 0;

if(communicationType == 0)
{
dataBuffer[0] = (1 << 7) | registerAddress;
dataBuffer[1] = 0;
SPI_Read(1, dataBuffer, 2);
registerValue = dataBuffer[1];
}
else
{
I2C_Write(0x1D,
&registerAddress,
1,
0);
I2C_Read(0x1D,
&registerValue,
1,
1);
}

return registerValue;
}

# 102
void ADXL345_SetRegisterValue(unsigned char registerAddress,
unsigned char registerValue)
{
unsigned char dataBuffer[2] = {0, 0};

if(communicationType == 0)
{
dataBuffer[0] = (0 << 7) | registerAddress;
dataBuffer[1] = registerValue;
SPI_Write(1, dataBuffer, 2);
}
else
{
dataBuffer[0] = registerAddress;
dataBuffer[1] = registerValue;
I2C_Write(0x1D, dataBuffer, 2, 1);
}
}

# 135
char ADXL345_Init(char commProtocol)
{
unsigned char status = 0;

communicationType = commProtocol;
if(commProtocol == 0)
{
status = SPI_Init(0,
1000000,
1,
0);
}
else
{
status = I2C_Init(100000);
}
if(ADXL345_GetRegisterValue(0x00) != 0xE5)
{
status = -1;
}
selectedRange = 2;
fullResolutionSet = 0;

return status;
}

# 170
void ADXL345_SetPowerMode(unsigned char pwrMode)
{
unsigned char oldPowerCtl = 0;
unsigned char newPowerCtl = 0;

oldPowerCtl = ADXL345_GetRegisterValue(0x2D);
newPowerCtl = oldPowerCtl & ~(1 << 3);
newPowerCtl = newPowerCtl | (pwrMode * (1 << 3));
ADXL345_SetRegisterValue(0x2D, newPowerCtl);
}

# 190
void ADXL345_GetXyz(short* x,
short* y,
short* z)
{
unsigned char firstRegAddress = 0x32;
unsigned char readBuffer[7] = {0, 0, 0, 0, 0, 0, 0};

if(communicationType == 0)
{
readBuffer[0] = (1 << 7) |
(1 << 6) |
firstRegAddress;
SPI_Read(1, readBuffer, 7);

*x = ((short)readBuffer[2] << 8) + readBuffer[1];

*y = ((short)readBuffer[4] << 8) + readBuffer[3];

*z = ((short)readBuffer[6] << 8) + readBuffer[5];
}
else
{
I2C_Write(0x1D,
&firstRegAddress,
1,
0);
I2C_Read(0x1D,
readBuffer,
6,
1);

*x = ((short)readBuffer[1] << 8) + readBuffer[0];

*y = ((short)readBuffer[3] << 8) + readBuffer[2];

*z = ((short)readBuffer[5] << 8) + readBuffer[4];
}
}

# 238
void ADXL345_GetGxyz(float* x,
float* y,
float* z)
{
short xData = 0;
short yData = 0;
short zData = 0;

ADXL345_GetXyz(&xData, &yData, &zData);
*x = (float)(fullResolutionSet ? (xData * 0.0039) :
(xData * 0.0039 * (selectedRange >> 1)));
*y = (float)(fullResolutionSet ? (yData * 0.0039) :
(yData * 0.0039 * (selectedRange >> 1)));
*z = (float)(fullResolutionSet ? (zData * 0.0039) :
(zData * 0.0039 * (selectedRange >> 1)));
}

# 282
void ADXL345_SetTapDetection(unsigned char tapType,
unsigned char tapAxes,
unsigned char tapDur,
unsigned char tapLatent,
unsigned char tapWindow,
unsigned char tapThresh,
unsigned char tapInt)
{
unsigned char oldTapAxes = 0;
unsigned char newTapAxes = 0;
unsigned char oldIntMap = 0;
unsigned char newIntMap = 0;
unsigned char oldIntEnable = 0;
unsigned char newIntEnable = 0;

oldTapAxes = ADXL345_GetRegisterValue(0x2A);
newTapAxes = oldTapAxes & ~((1 << 2) |
(1 << 1) |
(1 << 0));
newTapAxes = newTapAxes | tapAxes;
ADXL345_SetRegisterValue(0x2A, newTapAxes);
ADXL345_SetRegisterValue(0x21, tapDur);
ADXL345_SetRegisterValue(0x22, tapLatent);
ADXL345_SetRegisterValue(0x23, tapWindow);
ADXL345_SetRegisterValue(0x1D, tapThresh);
oldIntMap = ADXL345_GetRegisterValue(0x2F);
newIntMap = oldIntMap & ~((1 << 6) | (1 << 5));
newIntMap = newIntMap | tapInt;
ADXL345_SetRegisterValue(0x2F, newIntMap);
oldIntEnable = ADXL345_GetRegisterValue(0x2E);
newIntEnable = oldIntEnable & ~((1 << 6) | (1 << 5));
newIntEnable = newIntEnable | tapType;
ADXL345_SetRegisterValue(0x2E, newIntEnable);
}

# 339
void ADXL345_SetActivityDetection(unsigned char actOnOff,
unsigned char actAxes,
unsigned char actAcDc,
unsigned char actThresh,
unsigned char actInt)
{
unsigned char oldActInactCtl = 0;
unsigned char newActInactCtl = 0;
unsigned char oldIntMap = 0;
unsigned char newIntMap = 0;
unsigned char oldIntEnable = 0;
unsigned char newIntEnable = 0;

oldActInactCtl = ADXL345_GetRegisterValue(0x2E);
newActInactCtl = oldActInactCtl & ~((1 << 7) |
(1 << 6) |
(1 << 5) |
(1 << 4));
newActInactCtl = newActInactCtl | (actAcDc | actAxes);
ADXL345_SetRegisterValue(0x27, newActInactCtl);
ADXL345_SetRegisterValue(0x24, actThresh);
oldIntMap = ADXL345_GetRegisterValue(0x2F);
newIntMap = oldIntMap & ~((1 << 4));
newIntMap = newIntMap | actInt;
ADXL345_SetRegisterValue(0x2F, newIntMap);
oldIntEnable = ADXL345_GetRegisterValue(0x2E);
newIntEnable = oldIntEnable & ~((1 << 4));
newIntEnable = newIntEnable | ((1 << 4) * actOnOff);
ADXL345_SetRegisterValue(0x2E, newIntEnable);
}

# 394
void ADXL345_SetInactivityDetection(unsigned char inactOnOff,
unsigned char inactAxes,
unsigned char inactAcDc,
unsigned char inactThresh,
unsigned char inactTime,
unsigned char inactInt)
{
unsigned char oldActInactCtl = 0;
unsigned char newActInactCtl = 0;
unsigned char oldIntMap = 0;
unsigned char newIntMap = 0;
unsigned char oldIntEnable = 0;
unsigned char newIntEnable = 0;

oldActInactCtl = ADXL345_GetRegisterValue(0x2E);
newActInactCtl = oldActInactCtl & ~((1 << 3) |
(1 << 2) |
(1 << 1) |
(1 << 0));
newActInactCtl = newActInactCtl | (inactAcDc | inactAxes);
ADXL345_SetRegisterValue(0x27, newActInactCtl);
ADXL345_SetRegisterValue(0x25, inactThresh);
ADXL345_SetRegisterValue(0x26, inactTime);
oldIntMap = ADXL345_GetRegisterValue(0x2F);
newIntMap = oldIntMap & ~((1 << 3));
newIntMap = newIntMap | inactInt;
ADXL345_SetRegisterValue(0x2F, newIntMap);
oldIntEnable = ADXL345_GetRegisterValue(0x2E);
newIntEnable = oldIntEnable & ~((1 << 3));
newIntEnable = newIntEnable | ((1 << 3) * inactOnOff);
ADXL345_SetRegisterValue(0x2E, newIntEnable);
}

# 443
void ADXL345_SetFreeFallDetection(unsigned char ffOnOff,
unsigned char ffThresh,
unsigned char ffTime,
unsigned char ffInt)
{
unsigned char oldIntMap = 0;
unsigned char newIntMap = 0;
unsigned char oldIntEnable = 0;
unsigned char newIntEnable = 0;

ADXL345_SetRegisterValue(0x28, ffThresh);
ADXL345_SetRegisterValue(0x29, ffTime);
oldIntMap = ADXL345_GetRegisterValue(0x2F);
newIntMap = oldIntMap & ~((1 << 2));
newIntMap = newIntMap | ffInt;
ADXL345_SetRegisterValue(0x2F, newIntMap);
oldIntEnable = ADXL345_GetRegisterValue(0x2E);
newIntEnable = oldIntEnable & ~(1 << 2);
newIntEnable = newIntEnable | ((1 << 2) * ffOnOff);
ADXL345_SetRegisterValue(0x2E, newIntEnable);
}

# 474
void ADXL345_SetOffset(unsigned char xOffset,
unsigned char yOffset,
unsigned char zOffset)
{
ADXL345_SetRegisterValue(0x1E, xOffset);
ADXL345_SetRegisterValue(0x1F, yOffset);
ADXL345_SetRegisterValue(0x20, yOffset);
}

# 497
void ADXL345_SetRangeResolution(unsigned char gRange, unsigned char fullRes)
{
unsigned char oldDataFormat = 0;
unsigned char newDataFormat = 0;

oldDataFormat = ADXL345_GetRegisterValue(0x31);
newDataFormat = oldDataFormat & ~(((0x3) & 0x3) | (1 << 3));
newDataFormat = newDataFormat | ((gRange) & 0x3) | fullRes;
ADXL345_SetRegisterValue(0x31, newDataFormat);
selectedRange = (1 << (gRange + 1));
fullResolutionSet = fullRes ? 1 : 0;
}
